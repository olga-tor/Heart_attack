import re
from typing import List

import joblib
import pandas as pd
from fastapi import HTTPException

LEVEL = 0.3

def to_snake_case(column_name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1\2', column_name)
    s2 = re.sub(r'[ ]+', '_', s1)
    return s2.lower().strip('_')

def init_model():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        model = joblib.load("model.joblib")
        if model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")

        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return model

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª model.joblib –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")


class PredictionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏"""

    def __init__(self):
        self.model = init_model()

    def _validate_dataframe(self, test_data: pd.DataFrame):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è DataFrame"""
        if test_data.empty:
            raise ValueError("CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

    def predict_csv(self, file) -> List:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è CSV —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
            test_data = pd.read_csv(file)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            self._validate_dataframe(test_data)
            print(f"üìÅ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(test_data)} —Å—Ç—Ä–æ–∫, {len(test_data.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏

            test_data.columns = [to_snake_case(col) for col in test_data.columns]
            probs = self.model.predict_proba(test_data)[:, 1]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥
            predictions = (probs >= LEVEL).astype(int)
            print(f"üéØ –°–¥–µ–ª–∞–Ω–æ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

            return predictions.tolist()

        except Exception as e:
            raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
